"""
Created on Sat Mar 25 13:38:32 2023

@author: Meeko
"""

#-------------------------------IMPORTS-------------------------------
import os
import openai
import tkinter as tk
from gtts import gTTS
from playsound import playsound  
from PIL import ImageTk, Image
#-------------------------------IMPORTS-------------------------------

#-------------------------------METHODS---------------------------------
# Define function to open a file for contents
def open_file(filepath):
    with open(filepath,'r') as infile:
        return infile.read()

# Define request to OpenAI model for statement response
def get_response(prompt):
    # Generate a response using the OpenAI API
    response = openai.Completion.create(
        model = "text-davinci-003",
        prompt = prompt,
        max_tokens = 512,
        temperature = 0.75,
        presence_penalty = -0.1,
        frequency_penalty = -0.1,
        stop=None,
    )
    # Print the response generated by ChatGPT
    return response.choices[0].text.strip()

# Define a function to handle user input and display the response from ChatGPT
def handle_input():
    user_input = "Pretending to be a frog butler from the 19th century named \"Le Frog\" "\
    + "to a sir/madam, answer this statement: " + input_field.get()
    # Response from Le Frog
    response = get_response(user_input)
    # Setup for text field to be good and not messed up :)
    output_field.configure(state='normal')
    output_field.delete('1.0', 'end')
    output_field.insert('end', response)
    output_field.configure(height=output_field.index('end-1c').split('.')[0])
    output_field.configure(state='disabled')
    output_field.config(height=10)
    # Start the loop to switch between images
    switch_image()
    # Setup for text-to-audio
    language = 'en'
    text2audio = gTTS(text=response, lang=language, slow=False)
    text2audio.save("audioresponse.mp3")
    cwd = os.getcwd() + "\\"
    playsound(cwd+"audioresponse.mp3")

# Define a function to close the GUI window
def close_window():
    window.destroy()
    
# Define a function to switch between the two images
def switch_image():
    if label.image == img:
        label.configure(image=img2)
        label.image = img2
    else:
        label.configure(image=img)
        label.image = img
    window.after(500, switch_image)
#-------------------------------METHODS---------------------------------

#-------------------------------MAIN-------------------------------------
# Set the OpenAI API key
#OPTIONAL: SET AS AN ENVIRONMENT VARIABLE
openai.api_key = open_file('openai_apikey.txt')

# Create the GUI window
window = tk.Tk()
window.title("The Amazing Frog Butler, Le Frog!")

# Create "Le Frog" picture for the window
image_label = tk.Label(window, state='normal')
# Closed mouth "Le Frog"
cwdfrog = os.getcwd() + "\\lefrogclosed.png"
render = Image.open(cwdfrog)
img = ImageTk.PhotoImage(render)
# Open mouth "Le Frog"
cwdfrog2 = os.getcwd() + "\\lefrogopen.png"
render2 = Image.open(cwdfrog2)
img2 = ImageTk.PhotoImage(render2)
# Create a Label Widget to display the text or Image
label = tk.Label(image = img)
label.image = img
label.pack()

# Create the input field and label
input_label = tk.Label(window, text="Enter your question:")
input_label.pack()
input_field = tk.Entry(window, width=100)
input_field.pack()

# Create the output field and label
output_label = tk.Label(window, text="Le Frog:")
output_label.pack()
scrollbar = tk.Scrollbar(orient="horizontal")
output_field = tk.Text(window, height=10, state='disabled', wrap='word', xscrollcommand=scrollbar.set)
output_field.pack()

# Create the "Ask" button
ask_button = tk.Button(window, text="Ask", command=handle_input)
ask_button.pack()

# Run the GUI window
window.mainloop()

# Create the "Exit" button
exit_button = tk.Button(window, text="Exit", command=close_window)
exit_button.pack()
#-------------------------------MAIN-------------------------------------
